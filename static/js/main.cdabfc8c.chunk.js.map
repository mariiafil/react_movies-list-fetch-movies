{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/getMovie.ts","api/constants.ts","components/FindMovie/FindMovie.tsx","index.tsx","App.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","query","a","fetch","response","json","FindMovie","addMovie","useState","setMovie","setQuery","error","setError","onSubmit","e","preventDefault","then","movieFromServer","Title","Plot","Poster","imdbID","Response","htmlFor","type","id","onChange","target","value","onFocus","placeholder","onClick","ReactDOM","render","data","setMovies","find","existingMovie","document","getElementById"],"mappings":"+wEAKaA,G,kBAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MADwC,IAExCC,mBAFwC,MAE1B,GAF0B,EAGxCC,EAHwC,EAGxCA,OACAC,EAJwC,EAIxCA,QAJwC,OAMxC,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aC7BKK,EAA8B,SAAC,GAAD,QACzCC,cADyC,MAChC,GADgC,SAGzC,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,+BCZ3BG,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACCC,MCHN,8CDGkBF,GADb,cAChBG,EADgB,yBAGfA,EAASC,QAHM,2CAAH,sDEURC,EAAuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAC1BC,mBAAuB,MADG,mBAC7CX,EAD6C,KACtCY,EADsC,OAE1BD,mBAAS,IAFiB,mBAE7CP,EAF6C,KAEtCS,EAFsC,OAG1BF,oBAAS,GAHiB,mBAG7CG,EAH6C,KAGtCC,EAHsC,KAmDpD,OACE,oCACE,0BACEtB,UAAU,aACVuB,SA9Ce,SAACC,GACpBA,EAAEC,iBACFf,EAASC,GACNe,MAAK,SAAAC,GAAoB,IAEf/B,EAKL+B,EALFC,MACM/B,EAIJ8B,EAJFE,KACQ/B,EAGN6B,EAHFG,OACQrB,EAENkB,EAFFI,OAIe,SAFbJ,EADFK,UAaAb,EARkB,CAChBvB,QACAC,cACAC,SACAW,SACAV,QDvCY,8BCiCaU,IAU3BW,EAAS,KAETE,GAAS,QAuBX,yBAAKtB,UAAU,SACb,2BAAOA,UAAU,QAAQiC,QAAQ,eAAjC,eAIA,yBAAKjC,UAAU,WACb,2BACEkC,KAAK,OACLC,GAAG,cACHC,SA7DQ,SAACZ,GACnBJ,EAASI,EAAEa,OAAOC,QA6DRC,QApBQ,WAClBjB,GAAS,IAoBCgB,MAAO3B,EACP6B,YAAY,0BACZxC,UAAWqB,EAAQ,kBAAoB,WAG1CA,GACC,uBAAGrB,UAAU,kBAAb,yCAOJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEkC,KAAK,SACLlC,UAAU,mBAFZ,iBAQF,yBAAKA,UAAU,WACb,4BACEkC,KAAK,SACLO,QAvDM,WACZlC,IACFU,EAASV,GACTa,EAAS,IACTD,EAAS,QAoDDnB,UAAU,qBAHZ,sBAWN,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kCAAIO,QAAJ,IAAIA,OAAJ,EAAIA,EAAOX,OACVW,GAAS,kBAAC,EAAcA,M,OCjHjCmC,IAASC,OAAO,mBCCO,WAAO,IAAD,EACCzB,mBAAkB0B,GADnB,mBACpBvC,EADoB,KACZwC,EADY,KAY3B,OACE,yBAAK7C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWiB,SAfA,SAACV,IACOF,EACpByC,MAAK,SAAAC,GAAa,OAAIxC,EAAME,SAAWsC,EAActC,WAGtDoC,EAAU,GAAD,mBAAKxC,GAAL,CAAaE,YDTZ,MAASyC,SAASC,eAAe,W","file":"static/js/main.cdabfc8c.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import { URL } from './constants';\n\nexport const getMovie = async (query: string): Promise<MovieFromServer> => {\n  const response = await fetch(URL + query);\n\n  return response.json();\n};\n","export const URL = 'https://www.omdbapi.com/?apikey=e24c755f&t=';\nexport const URL_IMDB = 'https://www.imdb.com/title/';\n","import React, {\n  FC, useState, ChangeEvent, FormEvent,\n} from 'react';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/getMovie';\nimport { URL_IMDB } from '../../api/constants';\n\ninterface Props {\n  addMovie: (movie: Movie) => void;\n}\n\nexport const FindMovie: FC<Props> = ({ addMovie }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n\n  const handleInput = (e: ChangeEvent<HTMLInputElement>): void => {\n    setQuery(e.target.value);\n  };\n\n  const handleSearch = (e: FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    getMovie(query)\n      .then(movieFromServer => {\n        const {\n          Title: title,\n          Plot: description,\n          Poster: imgUrl,\n          imdbID: imdbId,\n          Response,\n        } = movieFromServer;\n\n        if (Response === 'True') {\n          const imdbUrl = URL_IMDB + imdbId;\n          const newMoovie = {\n            title,\n            description,\n            imgUrl,\n            imdbId,\n            imdbUrl,\n          };\n\n          setMovie(newMoovie);\n          setQuery('');\n        } else {\n          setError(true);\n        }\n      });\n  };\n\n  const handleAdd = () => {\n    if (movie) {\n      addMovie(movie);\n      setQuery('');\n      setMovie(null);\n    }\n  };\n\n  const handleFocus = () => {\n    setError(false);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSearch}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n          Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              onChange={handleInput}\n              onFocus={handleFocus}\n              value={query}\n              placeholder=\"Enter a title to search\"\n              className={error ? 'input is-danger' : 'input'}\n            />\n          </div>\n          {error && (\n            <p className=\"help is-danger\">\n               Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n            Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              onClick={handleAdd}\n              className=\"button is-primary\"\n            >\n            Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <p>{movie?.title}</p>\n        {movie && <MovieCard {...movie} />}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","import React, { FC, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App: FC = () => {\n  const [movies, setMovies] = useState<Movie[]>(data);\n\n  const addMovie = (movie: Movie): void => {\n    const movieNotExist = !movies\n      .find(existingMovie => movie.imdbId === existingMovie.imdbId);\n\n    if (movieNotExist) {\n      setMovies([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n"],"sourceRoot":""}